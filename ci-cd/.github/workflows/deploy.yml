name: Security Monitor CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-central-1
  ECR_REGISTRY: 299138067566.dkr.ecr.eu-central-1.amazonaws.com
  EKS_CLUSTER: devops_cluster
  NAMESPACE: security-monitor

jobs:
  # Security and Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r backend/ -f json -o bandit-report.json || true

    - name: Run ESLint security checks
      run: |
        cd frontend
        npm install
        npm run lint || true

  # Build and Test
  build-test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Python tests
      run: |
        cd backend
        python -m pytest tests/ || echo "No tests found"

    - name: Run Node.js tests
      run: |
        cd frontend
        npm test || echo "No tests found"

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Build and Push Docker Images
  build-push:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/devops-backend:latest
          ${{ env.ECR_REGISTRY }}/devops-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/devops-frontend:latest
          ${{ env.ECR_REGISTRY }}/devops-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Scan backend image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.ECR_REGISTRY }}/devops-backend:${{ github.sha }}
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Scan frontend image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.ECR_REGISTRY }}/devops-frontend:${{ github.sha }}
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

  # Deploy to EKS
  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

    - name: Verify cluster connection
      run: kubectl get nodes

    - name: Deploy to EKS
      run: |
        # Apply Kubernetes manifests
        kubectl apply -f kubernetes/namespace.yaml
        kubectl apply -f kubernetes/production_configmap.yaml
        kubectl apply -f kubernetes/secret.yaml
        
        # Create ECR secret
        kubectl create secret docker-registry ecr-secret \
          --docker-server=${{ env.ECR_REGISTRY }} \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }}) \
          --namespace=${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy backend
        kubectl apply -f kubernetes/backend-deployment.yaml
        kubectl apply -f kubernetes/backend-service.yaml
        
        # Deploy frontend
        kubectl apply -f kubernetes/frontend-deployment.yaml
        kubectl apply -f kubernetes/frontend-service.yaml
        
        # Deploy ingress
        kubectl apply -f kubernetes/production_ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/security-monitor-backend -n ${{ env.NAMESPACE }}
        kubectl wait --for=condition=available --timeout=300s deployment/security-monitor-frontend -n ${{ env.NAMESPACE }}

    - name: Create admin user
      run: |
        kubectl exec -it deployment/security-monitor-backend -n ${{ env.NAMESPACE }} -- python create_admin.py || echo "Admin user may already exist"

    - name: Verify deployment
      run: |
        kubectl get all -n ${{ env.NAMESPACE }}
        kubectl get ingress -n ${{ env.NAMESPACE }}

  # Health Check
  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

    - name: Get LoadBalancer URL
      id: get-url
      run: |
        URL=$(kubectl get ingress security-monitor-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "url=https://$URL" >> $GITHUB_OUTPUT

    - name: Health check
      run: |
        # Wait for DNS propagation
        sleep 60
        
        # Test application health
        curl -f ${{ steps.get-url.outputs.url }}/health || exit 1
        
        # Test API endpoint
        curl -f ${{ steps.get-url.outputs.url }}/api/v1/auth/me || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Deployment successful!"
        echo "üåê Application URL: ${{ steps.get-url.outputs.url }}"
        echo "üë§ Login: admin / admin123"

  # Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy, health-check]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

    - name: Rollback deployment
      run: |
        kubectl rollout undo deployment/security-monitor-backend -n ${{ env.NAMESPACE }}
        kubectl rollout undo deployment/security-monitor-frontend -n ${{ env.NAMESPACE }}
        echo "üîÑ Rollback completed"

    - name: Notify rollback
      run: |
        echo "‚ùå Deployment failed and rolled back"
        echo "Please check the logs and fix the issues"
