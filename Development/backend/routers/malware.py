"""
Malware detection API endpoints
"""

from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from typing import List, Optional
from database import get_db
from models import User, MalwareReport
from schemas import (
    MalwareReport as MalwareReportSchema,
    MalwareReportCreate,
    MalwareReportUpdate,
    MessageResponse,
    PaginatedResponse
)
from auth import get_current_active_user
from datetime import datetime, timedelta

router = APIRouter(prefix="/malware", tags=["malware"])

@router.post("/", response_model=MalwareReportSchema, status_code=status.HTTP_201_CREATED)
def create_malware_report(
    report: MalwareReportCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Create a new malware detection report"""
    db_report = MalwareReport(
        user_id=current_user.id,
        **report.dict()
    )
    
    db.add(db_report)
    db.commit()
    db.refresh(db_report)
    
    return db_report

@router.get("/", response_model=PaginatedResponse)
def get_malware_reports(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    user_id: Optional[int] = None,
    malware_detected: Optional[bool] = None,
    status_filter: Optional[str] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Get malware reports with filtering and pagination"""
    query = db.query(MalwareReport)
    
    # Filter by user (non-admin users can only see their own reports)
    if not current_user.is_admin:
        query = query.filter(MalwareReport.user_id == current_user.id)
    elif user_id:
        query = query.filter(MalwareReport.user_id == user_id)
    
    # Apply filters
    if malware_detected is not None:
        query = query.filter(MalwareReport.malware_detected == malware_detected)
    
    if status_filter:
        query = query.filter(MalwareReport.status == status_filter)
    
    if start_date:
        query = query.filter(MalwareReport.created_at >= start_date)
    
    if end_date:
        query = query.filter(MalwareReport.created_at <= end_date)
    
    # Get total count
    total = query.count()
    
    # Apply pagination
    reports = query.order_by(MalwareReport.created_at.desc()).offset(skip).limit(limit).all()
    
    # Calculate pages
    pages = (total + limit - 1) // limit
    
    return PaginatedResponse(
        items=[MalwareReportSchema.from_orm(report) for report in reports],
        total=total,
        page=skip // limit + 1,
        size=limit,
        pages=pages
    )

@router.get("/{report_id}", response_model=MalwareReportSchema)
def get_malware_report(
    report_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Get specific malware report by ID"""
    query = db.query(MalwareReport).filter(MalwareReport.id == report_id)
    
    # Non-admin users can only see their own reports
    if not current_user.is_admin:
        query = query.filter(MalwareReport.user_id == current_user.id)
    
    report = query.first()
    if not report:
        raise HTTPException(status_code=404, detail="Malware report not found")
    
    return report

@router.put("/{report_id}", response_model=MalwareReportSchema)
def update_malware_report(
    report_id: int,
    report_update: MalwareReportUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Update malware report"""
    query = db.query(MalwareReport).filter(MalwareReport.id == report_id)
    
    # Non-admin users can only update their own reports
    if not current_user.is_admin:
        query = query.filter(MalwareReport.user_id == current_user.id)
    
    report = query.first()
    if not report:
        raise HTTPException(status_code=404, detail="Malware report not found")
    
    # Update fields
    update_data = report_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(report, field, value)
    
    db.commit()
    db.refresh(report)
    
    return report

@router.delete("/{report_id}", response_model=MessageResponse)
def delete_malware_report(
    report_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Delete malware report"""
    query = db.query(MalwareReport).filter(MalwareReport.id == report_id)
    
    # Non-admin users can only delete their own reports
    if not current_user.is_admin:
        query = query.filter(MalwareReport.user_id == current_user.id)
    
    report = query.first()
    if not report:
        raise HTTPException(status_code=404, detail="Malware report not found")
    
    db.delete(report)
    db.commit()
    
    return MessageResponse(message="Malware report deleted successfully")

@router.get("/stats/summary")
def get_malware_stats(
    days: int = Query(30, ge=1, le=365),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Get malware detection statistics"""
    start_date = datetime.now() - timedelta(days=days)
    
    query = db.query(MalwareReport).filter(MalwareReport.created_at >= start_date)
    
    # Non-admin users can only see their own stats
    if not current_user.is_admin:
        query = query.filter(MalwareReport.user_id == current_user.id)
    
    total_reports = query.count()
    malware_detected = query.filter(MalwareReport.malware_detected == True).count()
    high_risk = query.filter(MalwareReport.suspicious_score >= 5).count()
    
    # Get top file types
    file_types = {}
    for report in query.all():
        if report.file_name:
            ext = report.file_name.split('.')[-1].lower() if '.' in report.file_name else 'no_extension'
            file_types[ext] = file_types.get(ext, 0) + 1
    
    top_file_types = sorted(file_types.items(), key=lambda x: x[1], reverse=True)[:10]
    
    return {
        "total_reports": total_reports,
        "malware_detected": malware_detected,
        "high_risk_files": high_risk,
        "detection_rate": (malware_detected / total_reports * 100) if total_reports > 0 else 0,
        "top_file_types": top_file_types,
        "period_days": days
    }

@router.get("/recent/activity")
def get_recent_malware_activity(
    limit: int = Query(10, ge=1, le=100),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Get recent malware detection activity"""
    query = db.query(MalwareReport)
    
    # Non-admin users can only see their own activity
    if not current_user.is_admin:
        query = query.filter(MalwareReport.user_id == current_user.id)
    
    recent_reports = query.order_by(MalwareReport.created_at.desc()).limit(limit).all()
    
    return [MalwareReportSchema.from_orm(report) for report in recent_reports]
